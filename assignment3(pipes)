#include <iostream>
#include <unistd.h>
#include <cstring>
#include <sys/types.h>
using namespace std;

int main() {
    int pipefds1[2], pipefds2[2]; // Pipe1: Parent -> Child, Pipe2: Child -> Parent
    pid_t pid;
    char parentMessage[100], childMessage[100], readMessage[100];

    // Create two pipes for communication
    if (pipe(pipefds1) == -1 || pipe(pipefds2) == -1) {
        cerr << "Pipe creation failed!" << endl;
        return 1;
    }

    // Create a child process using fork
    pid = fork();

    if (pid > 0) { // Parent process
        close(pipefds1[0]); // Close unused read end of pipe1
        close(pipefds2[1]); // Close unused write end of pipe2

        while (true) {
            // Parent writes to child
            cout << "Parent: Enter message for child (type 'exit' to stop): ";
            cin.getline(parentMessage, sizeof(parentMessage));
            write(pipefds1[1], parentMessage, strlen(parentMessage) + 1);

            // If parent types "exit", terminate the loop
            if (strcmp(parentMessage, "exit") == 0) {
                break;
            }

            // Parent reads from child
            read(pipefds2[0], readMessage, sizeof(readMessage));
            if (strcmp(readMessage, "exit") == 0) {
                break;
            }

            cout << "Parent received from Child: " << readMessage << endl;
        }
    }
    else if (pid == 0) { // Child process
        close(pipefds1[1]); // Close unused write end of pipe1
        close(pipefds2[0]); // Close unused read end of pipe2

        while (true) {
            // Child reads from parent
            read(pipefds1[0], readMessage, sizeof(readMessage));
            if (strcmp(readMessage, "exit") == 0) {
                break;
            }

            cout << "Child received from Parent: " << readMessage << endl;

            // Child writes to parent
            cout << "Child: Enter message for parent (type 'exit' to stop): ";
            cin.getline(childMessage, sizeof(childMessage));
            write(pipefds2[1], childMessage, strlen(childMessage) + 1);

            // If child types "exit", terminate the loop
            if (strcmp(childMessage, "exit") == 0) {
                break;
            }
        }
    }
    else { // Error during fork
        cerr << "Fork failed!" << endl;
        return 1;
    }

    return 0;
}

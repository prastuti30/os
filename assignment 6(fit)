#include <iostream>
#include <vector>
using namespace std;

// First Fit Memory Allocation
void firstFit(vector<int> blocks, vector<int> processes) {
    vector<int> allocation(processes.size(), -1);

    for (int i = 0; i < processes.size(); i++) {
        for (int j = 0; j < blocks.size(); j++) {
            if (blocks[j] >= processes[i]) {
                allocation[i] = j;
                blocks[j] -= processes[i];
                break;
            }
        }
    }

    cout << "\nFirst Fit Allocation:\n";
    for (int i = 0; i < processes.size(); i++) {
        cout << "Process " << i + 1 << " (Size: " << processes[i] << ") -> ";
        if (allocation[i] != -1)
            cout << "Block " << allocation[i] + 1 << endl;
        else
            cout << "Not Allocated\n";
    }
}

// Best Fit Memory Allocation
void bestFit(vector<int> blocks, vector<int> processes) {
    vector<int> allocation(processes.size(), -1);

    for (int i = 0; i < processes.size(); i++) {
        int bestIdx = -1;
        for (int j = 0; j < blocks.size(); j++) {
            if (blocks[j] >= processes[i]) {
                if (bestIdx == -1 || blocks[j] < blocks[bestIdx])
                    bestIdx = j;
            }
        }

        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blocks[bestIdx] -= processes[i];
        }
    }

    cout << "\nBest Fit Allocation:\n";
    for (int i = 0; i < processes.size(); i++) {
        cout << "Process " << i + 1 << " (Size: " << processes[i] << ") -> ";
        if (allocation[i] != -1)
            cout << "Block " << allocation[i] + 1 << endl;
        else
            cout << "Not Allocated\n";
    }
}

// Worst Fit Memory Allocation
void worstFit(vector<int> blocks, vector<int> processes) {
    vector<int> allocation(processes.size(), -1);

    for (int i = 0; i < processes.size(); i++) {
        int worstIdx = -1;
        for (int j = 0; j < blocks.size(); j++) {
            if (blocks[j] >= processes[i]) {
                if (worstIdx == -1 || blocks[j] > blocks[worstIdx])
                    worstIdx = j;
            }
        }

        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blocks[worstIdx] -= processes[i];
        }
    }

    cout << "\nWorst Fit Allocation:\n";
    for (int i = 0; i < processes.size(); i++) {
        cout << "Process " << i + 1 << " (Size: " << processes[i] << ") -> ";
        if (allocation[i] != -1)
            cout << "Block " << allocation[i] + 1 << endl;
        else
            cout << "Not Allocated\n";
    }
}

// Next Fit Memory Allocation
void nextFit(vector<int> blocks, vector<int> processes) {
    vector<int> allocation(processes.size(), -1);
    int j = 0; // Start from the beginning

    for (int i = 0; i < processes.size(); i++) {
        int count = 0;
        bool allocated = false;

        while (count < blocks.size()) {
            if (blocks[j] >= processes[i]) {
                allocation[i] = j;
                blocks[j] -= processes[i];
                allocated = true;
                break;
            }
            j = (j + 1) % blocks.size();
            count++;
        }
    }

    cout << "\nNext Fit Allocation:\n";
    for (int i = 0; i < processes.size(); i++) {
        cout << "Process " << i + 1 << " (Size: " << processes[i] << ") -> ";
        if (allocation[i] != -1)
            cout << "Block " << allocation[i] + 1 << endl;
        else
            cout << "Not Allocated\n";
    }
}

// Main Function
int main() {
    int nBlocks, nProcesses, choice;
    vector<int> blocks, processes;

    cout << "Enter number of memory blocks: ";
    cin >> nBlocks;
    blocks.resize(nBlocks);
    cout << "Enter sizes of " << nBlocks << " memory blocks:\n";
    for (int i = 0; i < nBlocks; i++) {
        cin >> blocks[i];
    }

    cout << "Enter number of processes: ";
    cin >> nProcesses;
    processes.resize(nProcesses);
    cout << "Enter sizes of " << nProcesses << " processes:\n";
    for (int i = 0; i < nProcesses; i++) {
        cin >> processes[i];
    }

    do {
        cout << "\nMemory Allocation Techniques Menu:\n";
        cout << "1. First Fit\n";
        cout << "2. Best Fit\n";
        cout << "3. Worst Fit\n";
        cout << "4. Next Fit\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                firstFit(blocks, processes);
                break;
            case 2:
                bestFit(blocks, processes);
                break;
            case 3:
                worstFit(blocks, processes);
                break;
            case 4:
                nextFit(blocks, processes);
                break;
            case 5:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 5);

    return 0;
}

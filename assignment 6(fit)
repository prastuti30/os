#include <iostream>
#include <vector>
#include <climits>

using namespace std;

struct Block {
    int size;
    int remaining;  // Remaining space in the block after allocation
    vector<int> allocations;  // Allocated process IDs
};

void resetMemory(vector<Block>& memoryBlocks, const vector<int>& originalSizes) {
    // Reset memory blocks to original sizes and clear allocations
    for (size_t i = 0; i < memoryBlocks.size(); ++i) {
        memoryBlocks[i].remaining = originalSizes[i];
        memoryBlocks[i].allocations.clear();
    }
}

bool allocateProcess(vector<Block>& memoryBlocks, int processSize, int strategy, const string& processName) {
    int i;
    bool allocated = false;

    if (strategy == 1) {  // First Fit
        for (i = 0; i < memoryBlocks.size(); ++i) {
            if (memoryBlocks[i].remaining >= processSize) {
                memoryBlocks[i].allocations.push_back(processSize);
                memoryBlocks[i].remaining -= processSize;
                cout << processName << " (" << processSize << " KB) allocated using First Fit in Block " << i + 1 << endl;
                allocated = true;
                break;
            }
        }
    } else if (strategy == 2) {  // Best Fit
        int minFit = INT_MAX;
        int bestBlock = -1;
        for (i = 0; i < memoryBlocks.size(); ++i) {
            if (memoryBlocks[i].remaining >= processSize && memoryBlocks[i].remaining - processSize < minFit) {
                minFit = memoryBlocks[i].remaining - processSize;
                bestBlock = i;
            }
        }
        if (bestBlock != -1) {
            memoryBlocks[bestBlock].allocations.push_back(processSize);
            memoryBlocks[bestBlock].remaining -= processSize;
            cout << processName << " (" << processSize << " KB) allocated using Best Fit in Block " << bestBlock + 1 << endl;
            allocated = true;
        }
    } else if (strategy == 3) {  // Worst Fit
        int maxFit = -1;
        int worstBlock = -1;
        for (i = 0; i < memoryBlocks.size(); ++i) {
            if (memoryBlocks[i].remaining >= processSize && memoryBlocks[i].remaining > maxFit) {
                maxFit = memoryBlocks[i].remaining;
                worstBlock = i;
            }
        }
        if (worstBlock != -1) {
            memoryBlocks[worstBlock].allocations.push_back(processSize);
            memoryBlocks[worstBlock].remaining -= processSize;
            cout << processName << " (" << processSize << " KB) allocated using Worst Fit in Block " << worstBlock + 1 << endl;
            allocated = true;
        }
    }
    return allocated;
}

int main() {
    int numBlocks, numProcesses;
    cout << "Enter number of memory blocks: ";
    cin >> numBlocks;

    vector<Block> memoryBlocks(numBlocks);
    vector<int> originalSizes(numBlocks);

    // Input memory block sizes
    for (int i = 0; i < numBlocks; ++i) {
        cout << "Block " << i + 1 << " size (in KB): ";
        cin >> memoryBlocks[i].size;
        memoryBlocks[i].remaining = memoryBlocks[i].size;  // Initialize remaining space
        originalSizes[i] = memoryBlocks[i].size;  // Save original sizes for resetting later
    }

    // Input process sizes
    cout << "Enter number of processes: ";
    cin >> numProcesses;
    vector<int> processSizes(numProcesses);
    for (int i = 0; i < numProcesses; ++i) {
        cout << "Enter size of Process " << i + 1 << ": ";
        cin >> processSizes[i];
    }

    int choice;
    do {
        cout << "\n1. First Fit\n2. Best Fit\n3. Worst Fit\n4. Next Fit\n5. Release Memory\n6. Display\n7. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        if (choice == 1 || choice == 2 || choice == 3) {
            // Reset memory before applying the strategy
            resetMemory(memoryBlocks, originalSizes);

            // Try to allocate processes
            for (int i = 0; i < numProcesses; ++i) {
                string processName = "Process " + to_string(i + 1);
                bool allocated = allocateProcess(memoryBlocks, processSizes[i], choice, processName);
                if (!allocated) {
                    cout << processName << " (" << processSizes[i] << " KB) cannot be allocated.\n";
                }
            }
        }
        else if (choice == 5) {
            // Release memory by resetting it
            resetMemory(memoryBlocks, originalSizes);
            cout << "Memory released.\n";
        }
        else if (choice == 6) {
            cout << "\nCurrent Memory Blocks Allocation:\n";
            for (int i = 0; i < numBlocks; ++i) {
                cout << "Block " << i + 1 << ": " << memoryBlocks[i].remaining << " KB remaining (";
                for (int j = 0; j < memoryBlocks[i].allocations.size(); ++j) {
                    cout << "Process " << j + 1 << " (" << memoryBlocks[i].allocations[j] << " KB), ";
                }
                cout << ")\n";
            }
        }
        else if (choice == 7) {
            cout << "Exiting...\n";
        }
        else {
            cout << "Invalid choice. Please try again.\n";
        }

    } while (choice != 7);

    return 0;
}
